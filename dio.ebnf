#######################################################################
#
# Grammar for the Content of the Inscription Field in the DIO-T3 Database
#
#######################################################################


#
#  EBNF-Directives ----

#
@ whitespace  = / */
@ literalws   = none
# @ comment     = /#.*/
@ ignorecase  = False
@ reduction   = merge
@ drop        = whitespace, backticked


#
# Container grammar ----
#

sco            = prettyspace `<sco>` prettyspace sec+ `</sco>` prettyspace §EOF
sec            = `<sec>` prettyspace ( snt | snr )* par* `</sec>` prettyspace

snr            = `<snr>` /[A-Z]+/ "." prettyspace `</snr>` prettyspace
snt            = `<snt>` prettyspace /(?:(?!<\/snt>)[\w .:,;()<>\/])+/ prettyspace `</snt>` prettyspace

par            = `<par>` prettyspace (lno | lin | table)+ `</par>` prettyspace

lno            = `<lno>` § inscription `</lno>` prettyspace
lin            = `<lin>` § inscription `</lin>` prettyspace

table  = `<table>` prettyspace row+ `</table>` prettyspace
row    = `<row>` prettyspace cell+ `</row>` prettyspace
cell   = `<cell>` prettyspace entry+ `</cell>` prettyspace
entry  = `<entry>` § inscription `</entry>` prettyspace

#
# Transcription Grammar ----
#

HIDE:inscription = ( inline | brackets | prettyspace )+
HIDE:inline = phrases | token | space

HIDE:phrases           = (token | brackets)+ space? phrase_terminator
HIDE:phrase_terminator = "." | ":" | "," | ";"

HIDE:token  = tags | insec | letters_range | letters | separator
HIDE:tags   = apptag | lig | nl | b | strong | em | sup | chr
apptag      =  /<(appnum|appalpha)[^>]*>[^<]*<\/\1>/+
lig         = "<lig>" | "</lig>"
nl       = "<nl></nl>"
b           = "<b>" | "</b>"
strong      = "<strong>" | "</strong>"
chr         = "<chr>" | "</chr>"
em          = "<em>" | "</em>"
sup         = "<sup>" | "</sup>"


HIDE:letters = letters_plain | letters_extended | letters_cross | letters_apostrophe
HIDE:letters_plain       = /[A-Za-z0-9](?!\u0323)/+
HIDE:letters_extended    = /[àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ](?!\u0323)/+
HIDE:letters_cross       = /[+†]/
HIDE:letters_apostrophe  =  "'"
HIDE:letters_range       = letters "-" letters

insec                  =  combined_plain | combined_extended | precomposed
HIDE:combined_plain    = /[a-zA-Z0-9](\u0323)/
HIDE:combined_extended = /[àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ](\u0323)/
HIDE:precomposed       = /[ẠḄḌẸḤỊḲḶṂṆỌṚṢṬỤṾẈỴẒạḅḍẹḥịḳḷṃṇọṛṣṭụṿẉỵẓ]/

HIDE:separator   = separator_phrase | separator_word_insec | separator_word |  separator_word_dot | separator_syl | separator_line | separator_colon | seperator_equal
separator_word       = ~"∙"~ | ~"·"~
separator_word_dot   = ~"."~
separator_word_insec = ~ /[∙·] ?(\u0323)/ ~
separator_line       = ~"/"~
separator_colon      = ~":"~
separator_phrase = ~","~
seperator_equal = /(?<!\s)=(?!\s)/

HIDE:separator_syl = separator_syl_double_insec | separator_syl_double | separator_syl_single | separator_syl_hyphen | separator_syl_space | separator_syl_nextline
separator_syl_single        = ~"=/"~
separator_syl_hyphen        = /(?<!-)-\// | /(?<!-)-(?=<)/
separator_syl_space         = ~"= /"~
separator_syl_nextline      = ~"/="
separator_syl_double        = ~"=/="~
separator_syl_double_insec  = /=\u0323\/=|=\/=\u0323/

HIDE:brackets = rasure | deletion | cpl | abr | add
rasure       = `[[` § inline+ `]]`
deletion     = `[` (unreadable | unknown ) `]`
cpl          = `[` § (inline | unknown | tags | abr)+ `]`
abr          = `(` § (token | space )+ `)`
add          = `&lt;` (tags | brackets | unknown | inline)+ `&gt;`

HIDE:unreadable  = "."+
HIDE:unknown     = `---` | `--`

HIDE:space        = " "~ ! separator
DROP:prettyspace  = /[\r\n ]*/
DROP:EOF    =  !/./

