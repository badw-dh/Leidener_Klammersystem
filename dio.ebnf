#######################################################################
#
# Grammar for the Content of the Inscription Field in the DIO-T3 Database
#
#######################################################################


#
#  EBNF-Directives ----

#
@ whitespace  = / */
@ literalws   = none
# @ comment     = /#.*/
@ ignorecase  = False
@ reduction   = merge
@ drop        = whitespace, backticked


#
# Container grammar ----
#

sco            = prettyspace `<sco>` prettyspace sec+ `</sco>` prettyspace §EOF
sec            = `<sec>` prettyspace ( snt | snr )* par* `</sec>` prettyspace

snr            = `<snr>` /[A-Z]+/ "." prettyspace `</snr>` prettyspace
snt            = `<snt>` prettyspace /(?:(?!<\/snt>)[\w .:,;()<>\/])+/ prettyspace `</snt>` prettyspace

par            = `<par>` prettyspace (lno | lin | table)+ `</par>` prettyspace

lno            = `<lno>` § inscription `</lno>` prettyspace
lin            = `<lin>` § inscription `</lin>` prettyspace

table  = `<table>` prettyspace row+ `</table>` prettyspace
row    = `<row>` prettyspace cell+ `</row>` prettyspace
cell   = `<cell>` prettyspace entry+ `</cell>` prettyspace
entry  = `<entry>` § inscription `</entry>` prettyspace

#
# Transcription Grammar ----
#

HIDE:inscription = ( inline | brackets | prettyspace )+
HIDE:inline = phrases | token | space

# TODO: Revise phrases. Not working correctly: Dots may be a phrase terminator, unreadable, or a separator.
HIDE:phrases           = (token | brackets)+ space? phrase_terminator
HIDE:phrase_terminator = "." | ":" | "," | ";"

HIDE:token  = tags | insec | letters | separator

#
# Tags ----
#

HIDE:tags   = app | lig | b | strong | em | chr | sup | nl

HIDE:app    = appalpha | appnum
appalpha    = `<appalpha id=` app_id `>` app_nr `</appalpha>`
appnum      = `<appnum id=` app_id `>` app_nr `</appnum>`
app_id      = /[^>]*/
app_nr      = /[^<]*/

lig         = `<lig>` (letters | brackets | space)+ `</lig>`
b           = `<b>` letters space? `</b>`
strong      = `<strong>` letters space? `</strong>`
em          = `<em>` letters space? `</em>`
chr         = `<chr>` letters space? `</chr>`
sup         = `<sup>` letters space? `</sup>`
nl          = `<nl></nl>`

#
# Letters ----
#

HIDE:letters = letters_range | letters_plain | letters_extended | letters_cross | letters_apostrophe

HIDE:letters_range       = letters "-" letters
HIDE:letters_plain       = /[A-Za-z0-9](?!\u0323)/+
HIDE:letters_extended    = /[àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ](?!\u0323)/+
HIDE:letters_cross       = /[+†]/
HIDE:letters_apostrophe  =  "'"

insec                  =  combined_plain | combined_extended | precomposed

HIDE:combined_plain    = /[a-zA-Z0-9](\u0323)/
HIDE:combined_extended = /[àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸçÇßØøÅåÆæœ](\u0323)/
HIDE:precomposed       = /[ẠḄḌẸḤỊḲḶṂṆỌṚṢṬỤṾẈỴẒạḅḍẹḥịḳḷṃṇọṛṣṭụṿẉỵẓ]/

#
# Separators ----
#

HIDE:separator   = separator_comma | separator_word_insec | separator_word |  separator_period | separator_syl | separator_line | separator_colon | seperator_equal

separator_word          = ~"·"~             # Renamed to wtr in AST
separator_line          = ~"/"~             # Renamed to z in AST

separator_word_insec    = ~ /· ?(\u0323)/ ~
separator_period        = ~"."~ # TODO: Not working correctly: ambiguity between phrase terminator, unreadable, and separator.
separator_colon         = ~":"~
separator_comma         = ~","~
seperator_equal         = /(?<!\s)=(?!\s)/

HIDE:separator_syl = separator_syl_double_insec | separator_syl_double | separator_syl_single | separator_syl_hyphen | separator_syl_space | separator_syl_nextline

separator_syl_single        = ~"=/"~
separator_syl_space         = ~"= /"~
separator_syl_hyphen        = /(?<!-)-\// | /(?<!-)-(?=<)/
separator_syl_nextline      = ~"/="
separator_syl_double        = ~"=/="~
separator_syl_double_insec  = /=\u0323\/=|=\/=\u0323/

#
# Brackets ----
#

HIDE:brackets =  abr | rasure | deletion | cpl | add

abr             = `(` (token | space )+ `)`
rasure          = `[[` (tags | deletion_nested | inline |  brackets)+ `]]`
deletion        = `[` lost `]` # Renamed to del in AST
deletion_nested = lost         # Renamed to del in AST
cpl             = `[` (tags | deletion_nested | inline |  brackets)+ `]`
add             = `&lt;` (tags | deletion_nested | inline | brackets)+ `&gt;`

HIDE:lost  = unknown | known
HIDE:unknown         = `---` | `--`
HIDE:known           = "."+

#
# Space ----
#

HIDE:space        = " "~ ! separator
DROP:prettyspace  = /[\r\n ]*/
DROP:EOF    =  !/./

